cods.colorado.edu

/api/<project>/<endpoint>

request.post binary blob
    DONT 64 bit encode

send station identifier in binary blob

Receive:
flask_restful
temporary: local python web server
from pi: need to set up port

http://cods.colorado.edu:<port number>/<project>/<endpoint>
(for testing)

https://cods.colorado.edu/<project>/<endpoint>
finally

Always send back 404 if

Dont want it to be public - establish authorization
    jwt is one way - too large
    python libraries let you sign something
        generate random set of data 128 bytes (include station id)
        encrypt and sign it with internal key
        look up algorithms used with jwt, find library that uses same algorithm
        each station sends it as authorization
            'Bearer' header is authorization
        flask: abort(401) is unauthorized
        anything but post: 404

headers = {"Content-Type": "application/octet-stream"}
upload = requests.post(URL, data=data, headers=headers)
determine if upload succeeded
(data is binary data)

from flask import request
(always represents current request)

class <endpoint>:
    def post:
        if request.headers['Content-Type'] == 'application/octet-stream':
            data = request.data
            post to database
        else:
            abort(415)

Account for if system sends something twice
sql alchemy
    dataclass basically
sqlite3 for testing

Once a day: systemd timer that pulls data from database, writes to file,
    and deletes data from database

server: directory with public keys
    ssh-keygen -t rsa -b 2048 -f jwtRS256.key
    # Don't add passphrase
    openssl rsa -in jwtRS256.key -pubout -outform PEM -out jwtRS256.key.pub
    cat jwtRS256.key
    cat jwtRS256.key.pub

snap install insomnia

sql alchemy object relational mapping